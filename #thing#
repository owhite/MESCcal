import sys
from PyQt5.QtWidgets import QApplication, QGraphicsScene, QGraphicsView, QGraphicsPolygonItem, QLCDNumber
from PyQt5.QtCore import Qt, QPointF, QTimer
from PyQt5.QtGui import QPolygonF, QColor

class PolygonColoringApp(QGraphicsView):
    def __init__(self):
        super().__init__()

        self.init_ui()

    def init_ui(self):
        scene = QGraphicsScene(self)
        self.setScene(scene)

        # Create polygons
        polygon1 = QPolygonF([QPointF(-50, -50), QPointF(0, -100), QPointF(50, -50)])
        polygon2 = QPolygonF([QPointF(-50, 50), QPointF(0, 100), QPointF(50, 50)])

        # Create QGraphicsPolygonItems with different colors
        item1 = QGraphicsPolygonItem(polygon1)
        item1.setBrush(QColor(Qt.red))

        item2 = QGraphicsPolygonItem(polygon2)
        item2.setBrush(QColor(Qt.blue))

        # Add items to the scene
        scene.addItem(item1)
        scene.addItem(item2)

        # Create QLCDNumber widgets
        self.lcd_number1 = QLCDNumber(self)
        self.lcd_number2 = QLCDNumber(self)

        # Set the geometry of the QLCDNumber widgets
        self.lcd_number1.setGeometry(50, 220, 100, 50)
        self.lcd_number2.setGeometry(250, 220, 100, 50)

        # Set digit count and segment style to make the color visible
        self.lcd_number1.setDigitCount(8)
        self.lcd_number2.setDigitCount(8)
        self.lcd_number1.setSegmentStyle(QLCDNumber.Flat)
        self.lcd_number2.setSegmentStyle(QLCDNumber.Flat)

        # Set color for the LCDNumbers
        self.lcd_number1.setStyleSheet("color: red")
        self.lcd_number2.setStyleSheet("color: blue")

        # Initialize countdown values
        self.countdown1 = 1
        self.countdown2 = 20

        # Create QTimer to update the countdown every 100 milliseconds
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_countdowns)
        self.timer.start(100)

        self.setWindowTitle('Polygon Coloring App with QLCDNumber')
        self.setGeometry(100, 100, 400, 300)

    def update_countdowns(self):
        # Update countdown values and display in QLCDNumbers
        self.countdown1 += 1
        self.countdown2 += 1
        self.lcd_number1.display(self.countdown1)
        self.lcd_number2.display(self.countdown2)

        # Check if countdowns reach 0 and stop the timer if needed
        if self.countdown1 <= 0 and self.countdown2 <= 0:
            self.timer.stop()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = PolygonColoringApp()
    window.show()

