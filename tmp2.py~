#!/usr/bin/env python3

import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QCheckBox
from PyQt5.QtCore import Qt, QObject, pyqtSignal

class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()

        self.setWindowTitle('Highlightable Button Example')

        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout(central_widget)

        self.button1 = QPushButton('Button 1')
        self.button2 = QPushButton('Button 2')
        self.button3 = QPushButton('Button 3')

        self.highlightable_button1 = HighlightableButton(self.button1)
        self.highlightable_button2 = HighlightableButton(self.button2)
        self.highlightable_button3 = HighlightableButton(self.button3)

        self.highlightable_button1.buttonPressed.connect(self.handleButtonPress)  
        self.highlightable_button2.buttonPressed.connect(self.handleButtonPress)  
        self.highlightable_button3.buttonPressed.connect(self.handleButtonPress)  

        self.checkBox1 = QCheckBox('CheckBox 1')
        self.checkBox2 = QCheckBox('CheckBox 2')
        self.checkBox3 = QCheckBox('CheckBox 3')

        layout.addWidget(self.button1)
        layout.addWidget(self.checkBox1)
        layout.addWidget(self.button2)
        layout.addWidget(self.checkBox2)
        layout.addWidget(self.button3)
        layout.addWidget(self.checkBox3)

        self.highlightable_checkBox1 = HighlightableCheckBox(self.checkBox1)
        self.highlightable_checkBox2 = HighlightableCheckBox(self.checkBox2)
        self.highlightable_checkBox3 = HighlightableCheckBox(self.checkBox3)

        self.highlightable_checkBox1.checkBoxStateChanged.connect(self.handleCheckBoxStateChange)
        self.highlightable_checkBox2.checkBoxStateChanged.connect(self.handleCheckBoxStateChange)
        self.highlightable_checkBox3.checkBoxStateChanged.connect(self.handleCheckBoxStateChange)

    def handleButtonPress(self):
        print('Button Pressed!')

    def handleCheckBoxStateChange(self, isChecked):
        print(f'CheckBox State Changed: {isChecked}')

    def keyPressEvent(self, event):
        if event.text() == 'g':
            print("get")
        if event.key() == Qt.Key_Return:
            self.button1.click()

class HighlightableCheckBox(QObject):
    highlighted = pyqtSignal(bool)
    checkBoxStateChanged = pyqtSignal(bool)  # Signal to indicate checkbox state change

    def __init__(self, checkbox):
        super(HighlightableCheckBox, self).__init__()
        self.checkBox = checkbox
        self.highlighted.connect(self.setHighlighted)
        self.checkBox.setFocusPolicy(Qt.StrongFocus)
        self.checkBox.installEventFilter(self)
        self.isHighlighted = False

    def setHighlighted(self, highlighted):
        self.isHighlighted = highlighted

    def eventFilter(self, obj, event):
        if obj == self.checkBox:
            if event.type() == event.FocusIn:
                self.highlighted.emit(True)
                self.checkBox.setStyleSheet("background-color: yellow;")
            elif event.type() == event.FocusOut:
                self.highlighted.emit(False)
                self.checkBox.setStyleSheet("")
            elif event.type() == event.KeyPress and self.isHighlighted:
                key = event.key()
                print(f'Key Pressed: {key}')
                if event.key() == Qt.Key_Return:
                    print("BOINK")
                    self.checkBox.setChecked(not self.checkBox.isChecked())
                    # Emit the signal
                    self.checkBoxStateChanged.emit(self.checkBox.isChecked()) 
            elif event.type() == event.MouseButtonPress and self.isHighlighted:
                self.checkBox.setChecked(not self.checkBox.isChecked())
                self.checkBoxStateChanged.emit(self.checkBox.isChecked()) 

        return super(HighlightableCheckBox, self).eventFilter(obj, event)

class HighlightableButton(QObject):
    highlighted = pyqtSignal(bool)
    buttonPressed = pyqtSignal()  # Signal to indicate a button press

    def __init__(self, button):
        super(HighlightableButton, self).__init__()
        self.button = button
        self.highlighted.connect(self.setHighlighted)
        self.button.setFocusPolicy(Qt.StrongFocus)
        self.button.setAutoDefault(True)
        self.button.installEventFilter(self)
        self.isHighlighted = False

    def setHighlighted(self, highlighted):
        self.isHighlighted = highlighted

    def eventFilter(self, obj, event):
        if obj == self.button:
            if event.type() == event.FocusIn:
                self.highlighted.emit(True)
                self.button.setStyleSheet("background-color: yellow;")
            elif event.type() == event.FocusOut:
                self.highlighted.emit(False)
                self.button.setStyleSheet("")
            elif event.type() == event.KeyPress and self.isHighlighted:
                key = event.key()
                print(f'Key Pressed: {key}')
                if event.key() == Qt.Key_Return:
                    print("BOINK")
                    self.buttonPressed.emit()  # Emit the button press signal
            elif event.type() == event.MouseButtonPress and self.isHighlighted:
                print("MOUSE")
                self.buttonPressed.emit()  # Emit the button press signal

        return super(HighlightableButton, self).eventFilter(obj, event)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    example = MainWindow()
    example.show()
    sys.exit(app.exec_())
