import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QCheckBox
from PyQt5.QtCore import Qt, QObject, pyqtSignal

# HL = "Hightlightable"
class HLCheckBox(QObject):
    highlighted = pyqtSignal(bool)
    checkBoxStateChanged = pyqtSignal(bool)  # Signal to indicate checkbox state change

    def __init__(self, checkbox):
        super(HLCheckBox, self).__init__()
        self.checkBox = checkbox
        self.highlighted.connect(self.setHighlighted)
        self.checkBox.setFocusPolicy(Qt.StrongFocus)
        self.checkBox.installEventFilter(self)
        self.isHighlighted = False

    def setHighlighted(self, highlighted):
        self.isHighlighted = highlighted

    def eventFilter(self, obj, event):
        if obj == self.checkBox:
            if event.type() == event.FocusIn:
                self.highlighted.emit(True)
                self.checkBox.setStyleSheet("background-color: yellow;")
            elif event.type() == event.FocusOut:
                self.highlighted.emit(False)
                self.checkBox.setStyleSheet("")
            elif event.type() == event.KeyPress and self.isHighlighted:
                key = event.key()
                print(f'Key Pressed: {key}')
                if event.key() == Qt.Key_Return:
                    print("BOINK")
                    self.checkBox.setChecked(not self.checkBox.isChecked())
                    # Emit the signal
                    self.checkBoxStateChanged.emit(self.checkBox.isChecked()) 
            elif event.type() == event.MouseButtonPress and self.isHighlighted:
                self.checkBox.setChecked(not self.checkBox.isChecked())
                self.checkBoxStateChanged.emit(self.checkBox.isChecked()) 

        return super(HLCheckBox, self).eventFilter(obj, event)

class HLButton(QObject):
    highlighted = pyqtSignal(bool)
    buttonPressed = pyqtSignal()  # Signal to indicate a button press

    def __init__(self, button):
        super(HLButton, self).__init__()
        self.button = button
        self.highlighted.connect(self.setHighlighted)
        self.button.setFocusPolicy(Qt.StrongFocus)
        self.button.setAutoDefault(True)
        self.button.installEventFilter(self)
        self.isHighlighted = False

    def setHighlighted(self, highlighted):
        self.isHighlighted = highlighted

    def eventFilter(self, obj, event):
        if obj == self.button:
            if event.type() == event.FocusIn:
                self.highlighted.emit(True)
                self.button.setStyleSheet("background-color: yellow;")
            elif event.type() == event.FocusOut:
                self.highlighted.emit(False)
                self.button.setStyleSheet("")
            elif event.type() == event.KeyPress and self.isHighlighted:
                key = event.key()
                print(f'Key Pressed: {key}')
                if event.key() == Qt.Key_Return:
                    print("BOINK")
                    self.buttonPressed.emit()  # Emit the button press signal
            elif event.type() == event.MouseButtonPress and self.isHighlighted:
                print("MOUSE")
                self.buttonPressed.emit()  # Emit the button press signal

        return super(HLButton, self).eventFilter(obj, event)


