# Payload.py

import time

class PayloadError(Exception):
    """A custom exception used to report errors in use of Timer class"""

class Payload:
    def __init__(self):
        self._start_time = None
        self._string = ''

    def concatString(self, s):
        """add to string"""
        if self._string is None:
            raise PayloadError(f"run string to add to it")

        self._string += s

    def setString(self, s):
        """add to string"""
        if self._string is not None:
            raise PayloadError(f"run string to add to it")

        self._string = s

    def reportString(self):
        """send string value"""
        if self._string is None:
            raise PayloadError(f"run string to add to it")

        return(self._string)

    def startTimer(self):
        """Start a new timer"""
        if self._start_time is not None:
            raise PayloadError(f"Timer is running. Use .stop() to stop it")

        self._start_time = time.perf_counter()

    def stopTimer(self):
        """Stop the timer, and report the elapsed time"""
        if self._start_time is None:
            raise PayloadError(f"Timer is not running. Use .start() to start it")

        elapsed_time = time.perf_counter() - self._start_time
        self._start_time = None
        print(f"Elapsed time: {elapsed_time:0.4f} seconds")

    def restartTimer(self):
        """Reset a new timer"""
        if self._start_time is None:
            raise PayloadError(f"Timer is not running. Use .start() to start it")

        self._start_time = time.perf_counter()


    def reportTimer(self):
        if self._start_time is None:
            raise PayloadError(f"Timer is not running. Use .start() to start it")

        return(time.perf_counter() - self._start_time)
        
